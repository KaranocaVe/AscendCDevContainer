name: build-and-push

on:
  workflow_dispatch:
  push:
    branches-ignore:
      - main

jobs:
  build-amd64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Load version variables (version.env)
        run: |
          set -e
          if [ ! -f version.env ]; then echo "version.env missing" >&2; exit 1; fi
          echo "Loading version.env:"; cat version.env
          set -a && . ./version.env && set +a
          : "${CANN_VERSION:?CANN_VERSION is required in version.env}"
          : "${KERNEL_VARIANT:?KERNEL_VARIANT is required in version.env}"
          : "${BASE_URL:=https://ascend-repo.obs.cn-east-2.myhuaweicloud.com/CANN}"
          LINUX_ARCH='linux-x86_64'
          PRODUCT_DIR_URLENCODED=$(printf 'CANN %s' "$CANN_VERSION" | sed 's/ /%20/g')
          TOOLKIT_FILE="Ascend-cann-toolkit_${CANN_VERSION}_${LINUX_ARCH}.run"
          KERNELS_FILE="Ascend-cann-kernels-${KERNEL_VARIANT}_${CANN_VERSION}_${LINUX_ARCH}.run"
          TOOLKIT_URL="${BASE_URL}/${PRODUCT_DIR_URLENCODED}/${TOOLKIT_FILE}?response-content-type=application/octet-stream"
          KERNELS_URL="${BASE_URL}/${PRODUCT_DIR_URLENCODED}/${KERNELS_FILE}?response-content-type=application/octet-stream"
          CANN_VERSION_LOWER=$(echo "$CANN_VERSION" | tr '[:upper:]' '[:lower:]')
          echo "CANN_VERSION=$CANN_VERSION" >> $GITHUB_ENV
          echo "CANN_VERSION_LOWER=$CANN_VERSION_LOWER" >> $GITHUB_ENV
          echo "KERNEL_VARIANT=$KERNEL_VARIANT" >> $GITHUB_ENV
          echo "LINUX_ARCH=$LINUX_ARCH" >> $GITHUB_ENV
          echo "BASE_URL=$BASE_URL" >> $GITHUB_ENV
          echo "PRODUCT_DIR_URLENCODED=$PRODUCT_DIR_URLENCODED" >> $GITHUB_ENV
          echo "TOOLKIT_FILE=$TOOLKIT_FILE" >> $GITHUB_ENV
          echo "KERNELS_FILE=$KERNELS_FILE" >> $GITHUB_ENV
          echo "TOOLKIT_URL=$TOOLKIT_URL" >> $GITHUB_ENV
          echo "KERNELS_URL=$KERNELS_URL" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Download Ascend installers (x86_64)
        run: |
          set -e
          echo "Downloading: ${KERNELS_FILE}"
          curl -L --fail -o "${KERNELS_FILE}" "${KERNELS_URL}"
          echo "Downloading: ${TOOLKIT_FILE}"
          curl -L --fail -o "${TOOLKIT_FILE}" "${TOOLKIT_URL}"
          ls -lh *.run

      - name: Compute tags
        run: |
          DATE=$(date +%Y%m%d)
          echo "DATE=$DATE" >> $GITHUB_ENV
          echo "IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/ascend-cann" >> $GITHUB_ENV

      - name: Build and push (linux/amd64)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64
          push: true
          build-args: |
            CANN_VERSION=${{ env.CANN_VERSION }}
          tags: |
            ${{ env.IMAGE }}:${{ env.CANN_VERSION_LOWER }}-x86_64
            ${{ env.IMAGE }}:${{ env.CANN_VERSION_LOWER }}-x86_64-${{ env.DATE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Validate image (x86_64)
        env:
          REPO: ${{ env.IMAGE }}
          TAG: ${{ env.CANN_VERSION_LOWER }}-x86_64
        run: |
          set -e
          docker pull "$REPO:$TAG"
          bash ./valid.sh

  build-arm64:
    runs-on: [self-hosted, linux, ARM64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Load version variables (version.env)
        run: |
          set -e
          if [ ! -f version.env ]; then echo "version.env missing" >&2; exit 1; fi
          echo "Loading version.env:"; cat version.env
          set -a && . ./version.env && set +a
          : "${CANN_VERSION:?CANN_VERSION is required in version.env}"
          : "${KERNEL_VARIANT:?KERNEL_VARIANT is required in version.env}"
          : "${BASE_URL:=https://ascend-repo.obs.cn-east-2.myhuaweicloud.com/CANN}"
          LINUX_ARCH='linux-aarch64'
          PRODUCT_DIR_URLENCODED=$(printf 'CANN %s' "$CANN_VERSION" | sed 's/ /%20/g')
          TOOLKIT_FILE="Ascend-cann-toolkit_${CANN_VERSION}_${LINUX_ARCH}.run"
          KERNELS_FILE="Ascend-cann-kernels-${KERNEL_VARIANT}_${CANN_VERSION}_${LINUX_ARCH}.run"
          TOOLKIT_URL="${BASE_URL}/${PRODUCT_DIR_URLENCODED}/${TOOLKIT_FILE}?response-content-type=application/octet-stream"
          KERNELS_URL="${BASE_URL}/${PRODUCT_DIR_URLENCODED}/${KERNELS_FILE}?response-content-type=application/octet-stream"
          CANN_VERSION_LOWER=$(echo "$CANN_VERSION" | tr '[:upper:]' '[:lower:]')
          echo "CANN_VERSION=$CANN_VERSION" >> $GITHUB_ENV
          echo "CANN_VERSION_LOWER=$CANN_VERSION_LOWER" >> $GITHUB_ENV
          echo "KERNEL_VARIANT=$KERNEL_VARIANT" >> $GITHUB_ENV
          echo "LINUX_ARCH=$LINUX_ARCH" >> $GITHUB_ENV
          echo "BASE_URL=$BASE_URL" >> $GITHUB_ENV
          echo "PRODUCT_DIR_URLENCODED=$PRODUCT_DIR_URLENCODED" >> $GITHUB_ENV
          echo "TOOLKIT_FILE=$TOOLKIT_FILE" >> $GITHUB_ENV
          echo "KERNELS_FILE=$KERNELS_FILE" >> $GITHUB_ENV
          echo "TOOLKIT_URL=$TOOLKIT_URL" >> $GITHUB_ENV
          echo "KERNELS_URL=$KERNELS_URL" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Download Ascend installers (arm64)
        run: |
          set -e
          echo "Downloading: ${KERNELS_FILE}"
          curl -L --fail -o "${KERNELS_FILE}" "${KERNELS_URL}"
          echo "Downloading: ${TOOLKIT_FILE}"
          curl -L --fail -o "${TOOLKIT_FILE}" "${TOOLKIT_URL}"
          ls -lh *.run

      - name: Compute tags
        run: |
          DATE=$(date +%Y%m%d)
          echo "DATE=$DATE" >> $GITHUB_ENV
          echo "IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/ascend-cann" >> $GITHUB_ENV

      - name: Build and push (linux/arm64)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          platforms: linux/arm64
          push: true
          build-args: |
            CANN_VERSION=${{ env.CANN_VERSION }}
          tags: |
            ${{ env.IMAGE }}:${{ env.CANN_VERSION_LOWER }}-arm64
            ${{ env.IMAGE }}:${{ env.CANN_VERSION_LOWER }}-arm64-${{ env.DATE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Validate image (arm64)
        env:
          REPO: ${{ env.IMAGE }}
          TAG: ${{ env.CANN_VERSION_LOWER }}-arm64
        run: |
          set -e
          docker pull "$REPO:$TAG"
          bash ./valid.sh

  manifest:
    runs-on: ubuntu-latest
    needs: [build-amd64, build-arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Load version variables (version.env)
        run: |
          set -e
          if [ ! -f version.env ]; then echo "version.env missing" >&2; exit 1; fi
          echo "Loading version.env:"; cat version.env
          set -a && . ./version.env && set +a
          : "${CANN_VERSION:?CANN_VERSION is required in version.env}"
          : "${KERNEL_VARIANT:?KERNEL_VARIANT is required in version.env}"
          : "${BASE_URL:=https://ascend-repo.obs.cn-east-2.myhuaweicloud.com/CANN}"
          CANN_VERSION_LOWER=$(echo "$CANN_VERSION" | tr '[:upper:]' '[:lower:]')
          DATE=$(date +%Y%m%d)
          echo "CANN_VERSION_LOWER=$CANN_VERSION_LOWER" >> $GITHUB_ENV
          echo "DATE=$DATE" >> $GITHUB_ENV
          echo "IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/ascend-cann" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create multi-arch manifest (version)
        run: |
          set -e
          docker buildx imagetools create \
            -t "$IMAGE:$CANN_VERSION_LOWER" \
            "$IMAGE:${CANN_VERSION_LOWER}-x86_64" \
            "$IMAGE:${CANN_VERSION_LOWER}-arm64"

      - name: Create multi-arch manifest (version+date)
        run: |
          set -e
          docker buildx imagetools create \
            -t "$IMAGE:${CANN_VERSION_LOWER}-${DATE}" \
            "$IMAGE:${CANN_VERSION_LOWER}-x86_64-${DATE}" \
            "$IMAGE:${CANN_VERSION_LOWER}-arm64-${DATE}"
